

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_5 = Integer(5); _sage_const_100 = Integer(100); _sage_const_3 = Integer(3); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2)
from ptrlib import Socket, Process
import ast

# sock = Socket("localhost", 9999)
sock = Process(["sage", "./poc.sage"])
p, M = sock.recvregex(r"p: (\d+), and M: (.+)")
p = int(p)
F = GF(p)
M = ast.literal_eval(M.decode())
M = matrix(F, _sage_const_5 , _sage_const_5 , M)
o = M.det().multiplicative_order()


for _ in range(_sage_const_100 ):
    C = ast.literal_eval(sock.recvlineafter(r"commitment is=").decode())
    C = matrix(F, _sage_const_5 , _sage_const_5 , C)

    md = M.det()
    cd = C.det()
    x = discrete_log(cd, md)
    yoshiking_hand = x % _sage_const_3 
    hand = [_sage_const_3 ,_sage_const_1 ,_sage_const_2 ][yoshiking_hand]

    sock.sendlineafter("hand(1-3): ", str(hand))
    print(sock.recvlineafter("[system]").decode().strip())

sock.interactive()


